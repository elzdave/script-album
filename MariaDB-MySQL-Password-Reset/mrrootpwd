#!/bin/bash

# mrrootpwd : MariaDB/MySQL Root Password Reset
#
# This script require administrative privilege
#
# Usage     : sudo bash mrrootpwd [new_root_pwd]
# Example   : sudo bash mrrootpwd sTr0n9p45sw0Rd
#
# (c) 2023 - 2024. David Eleazar

# Global variables
MY_CNF_DIR=/etc/my.cnf.d
MARIADB_CNF_FILE=${MY_CNF_DIR}/mariadb-server.cnf
MAIN_CONFIG=/etc/my.cnf

# ANSI colors
NC='\033[0m'
BLACK='\033[0;30m'
RED='\033[0;31m'
GREEN='\033[0;32m'
BROWN='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
LGRAY='\033[0;37m'
DGRAY='\033[1;30m'
LRED='\033[1;31m'
LGREEN='\033[1;32m'
YELLOW='\033[1;33m'
LBLUE='\033[1;34m'
LPURPLE='\033[1;35m'
LCYAN='\033[1;36m'
WHITE='\033[1;37m'

function version {
  echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }';
}

function backup_and_patch_config {
  local CONFIG=$1
  cp -p $CONFIG $CONFIG.bak
  sed -i '/\[mysqld\]/a skip-grant-tables\nskip-networking' $CONFIG
}

function restore_original_config {
  local CONFIG=$1
  cp -p $CONFIG.bak $CONFIG
  rm $CONFIG.bak
}

function load_insecure_config {
  if [ -d "$MY_CNF_DIR" ] 
  then
    echo -e "Directory ${YELLOW}$MY_CNF_DIR${NC} exists."
    if [ -f "$MARIADB_CNF_FILE" ]
    then
      echo -e "File ${LCYAN}$MARIADB_CNF_FILE${NC} exists."
      echo -e "Backuping ${LCYAN}$MARIADB_CNF_FILE${NC} as ${LCYAN}$MARIADB_CNF_FILE.bak${NC} . . ."
      backup_and_patch_config $MARIADB_CNF_FILE
    else
      echo -e "File ${LCYAN}$MARIADB_CNF_FILE${NC} ${RED}does not exist.${NC}"
      echo -e "Will edit the ${LGREEN}$MAIN_CONFIG${NC} main config."
      echo -e "Backuping ${LGREEN}$MAIN_CONFIG${NC} as ${LGREEN}$MAIN_CONFIG.bak${NC} . . ."
      backup_and_patch_config $MAIN_CONFIG
    fi
  else
    echo -e "Directory ${YELLOW}$MY_CNF_DIR${NC} ${RED}does not exist.${NC}"
    echo -e "Will edit the ${LGREEN}$MAIN_CONFIG${NC} main config."
    echo -e "Backuping ${LGREEN}$MAIN_CONFIG${NC} as ${LGREEN}$MAIN_CONFIG.bak${NC} . . ."
    backup_and_patch_config $MAIN_CONFIG
  fi
}

function check_restore_secure_config {
  if [ -d "$MY_CNF_DIR" ] 
  then
    echo -e "Directory ${YELLOW}$MY_CNF_DIR${NC} exists."
    if [ -f "$MARIADB_CNF_FILE.bak" ]
    then
      echo -e "The backup of ${LCYAN}$MARIADB_CNF_FILE${NC} file exists."
      echo -e "Restoring original ${LCYAN}$MARIADB_CNF_FILE${NC} . . ."
      restore_original_config $MARIADB_CNF_FILE
    else
      echo -e "The backup of ${LCYAN}$MARIADB_CNF_FILE${NC} file ${RED}does not exist.${NC}"
      echo -e "Will search for ${LGREEN}$MAIN_CONFIG${NC} backup . . ."
      if [ -f "$MAIN_CONFIG.bak" ]
      then
        echo -e "The backup of ${LGREEN}$MAIN_CONFIG${NC} exists."
        echo -e "Restoring original ${LGREEN}$MAIN_CONFIG${NC} . . ."
        restore_original_config $MAIN_CONFIG
      else
        echo -e "${RED}No backup found.${NC}"
      fi
    fi
  else
    echo -e "Directory ${YELLOW}$MY_CNF_DIR${NC} ${RED}does not exist.${NC}"
    if [ -f "$MAIN_CONFIG.bak" ]
    then
      echo -e "The backup of ${LGREEN}$MAIN_CONFIG${NC} exists."
      echo -e "Restoring original ${LGREEN}$MAIN_CONFIG${NC} . . ."
      restore_original_config $MAIN_CONFIG
    else
      echo -e "${RED}No backup found.${NC}"
    fi
  fi
}

function start_stop_service {
  local SERVICE_MANAGER=$1
  local SERVICE_NAME=$2
  local MODE=$3   # mode can be "secure" or "insecure"

  if [ "$SERVICE_MANAGER" == "service" ]; then
    $SERVICE_MANAGER $SERVICE_NAME stop
  else
    $SERVICE_MANAGER stop $SERVICE_NAME
  fi
  
  check_restore_secure_config

  if [ "$MODE" == "insecure" ]; then
    load_insecure_config
  fi
  
  if [ "$SERVICE_MANAGER" == "service" ]; then
    $SERVICE_MANAGER $SERVICE_NAME start
  else
    $SERVICE_MANAGER start $SERVICE_NAME
  fi
}

function begin_insecure_service {
  local SERVICE_MANAGER=$1
  local SERVICE_NAME=$2

  start_stop_service $SERVICE_MANAGER $SERVICE_NAME "insecure"
}

function end_insecure_service {
  local SERVICE_MANAGER=$1
  local SERVICE_NAME=$2

  start_stop_service $SERVICE_MANAGER $SERVICE_NAME "secure"
}

function get_update_plugin_query {
  local USER=$1
  local PLUGIN=$2

  echo 'UPDATE `mysql`.`user` SET `plugin` = "'$PLUGIN'" WHERE `user`="'$USER'";'
}

function build_pwd_reset_query {
  local DB=$1
  local VERSION=$2
  local PASSWORD=$3

  local FLUSH_QUERY='FLUSH PRIVILEGES;'

  if [ "$DB" == "MariaDB" ]; then
    # Dealing with MariaDB database
    if [ $(version "$VERSION") -lt $(version "10.2") ]; then
      # This query works on MariaDB prior to 10.2
      # Warning: this reset query involved low level hacks
      local CLEAR=$(get_update_plugin_query root)
      local RESET_PWD='UPDATE `mysql`.`user` SET `password` = PASSWORD("'$PASSWORD'") WHERE `user`="root";'
      local RESTORE=$(get_update_plugin_query root mysql_native_password)
      local BUILT_QUERY="${FLUSH_QUERY} ${CLEAR} ${FLUSH_QUERY} ${RESET_PWD} ${FLUSH_QUERY} ${RESTORE} ${FLUSH_QUERY}"
    elif [[ $(version "$VERSION") -ge $(version "10.2") && $(version "$VERSION") -lt $(version "10.4") ]]; then
      # This query works on MariaDB 10.2+
      local RESET_PWD='ALTER USER `root`@`localhost` IDENTIFIED BY "'$PASSWORD'";'
      local BUILT_QUERY="${FLUSH_QUERY} ${RESET_PWD} ${FLUSH_QUERY}"
    else
      # This mode works on MariaDB 10.4+, which by default using dual authentication plugins:
      # 'mysql_native_password' and 'unix_socket'
      # This method is preferred method for modern MariaDB 10.4+ installations
      local RESET_PWD='ALTER USER `root`@`localhost` IDENTIFIED VIA mysql_native_password USING PASSWORD("'$PASSWORD'") OR unix_socket;'
      local BUILT_QUERY="${FLUSH_QUERY} ${RESET_PWD} ${FLUSH_QUERY}"
    fi
  else
    # Dealing with MySQL database
    if [ $(version "$VERSION") -lt $(version "5.7") ]; then
      # This query works on old MySQL (<5.7)
      local RESET_PWD='SET PASSWORD FOR `root`@`localhost` = PASSWORD("'$PASSWORD'");'
      local BUILT_QUERY="${FLUSH_QUERY} ${RESET_PWD} ${FLUSH_QUERY}"
    else
      # This query works on newer MySQL (5.7+)
      local RESET_PWD='ALTER USER `root`@`localhost` IDENTIFIED BY "'$PASSWORD'";'
      local BUILT_QUERY="${FLUSH_QUERY} ${RESET_PWD} ${FLUSH_QUERY}"
    fi
  fi

  # Return the result
  echo $BUILT_QUERY
}

function reset_password {
  local SERVICE_MANAGER=$(echo $1 | awk -F':' '{print $1}')
  local SERVICE_NAME=$(echo $1 | awk -F':' '{print $2}')
  local DB=$(echo $2 | awk -F':' '{print $1}')
  local VERSION=$(echo $2 | awk -F':' '{print $2}')
  local PASSWORD=$3

  begin_insecure_service $SERVICE_MANAGER $SERVICE_NAME

  local QUERY=$(build_pwd_reset_query $DB $VERSION $PASSWORD)

  # For debugging only
  # echo $QUERY

  echo -e "Resetting ${CYAN}${DB}${NC} root password . . ."
  local RESULT=$(mysql -e "$QUERY" 2>&1 | grep ERROR)

  # For debugging only
  # echo $RESULT
  # read -p "Press any key to continue . . ."

  if [ "$RESULT" == "" ]
  then
    echo -e "Done reset password! Your new root password is : ${GREEN}${PASSWORD}${NC}"
  else
    echo -e "${LRED}Failed to change root password. Please try again.${NC}"
  fi

  end_insecure_service $SERVICE_MANAGER $SERVICE_NAME
}

# --- Main function execution ---

# Check for root privileges
if [ "$(id -u)" != "0" ];then
  echo -e "${LRED}Root access denied. Please run as root.${NC}"
  exit 1
fi

if [ "$1" == "" ]; then
  echo "Usage: sudo bash mrrootpwd [new_root_pwd]"
  echo "_____"
  echo -e "${LRED}ERROR: You must supply a strong, unique password as an argument.${NC}"
  exit 2
else
  SERVICE_NAME_SYSTEMD=$(systemctl list-units --type=service --all | grep -E 'MySQL|MariaDB' | awk -F' ' '{print $1}' | awk -F'.' '{print $1}')
  SERVICE_NAME_INITD=$(ls /etc/init.d | grep -E 'mysql|mariadb')

  if [ "$SERVICE_NAME_SYSTEMD" != "" ]; then
    echo -e "Will use ${LGREEN}systemctl${NC} service manager"
    SERVICE_NAME=$SERVICE_NAME_SYSTEMD
    SERVICE_MANAGER=systemctl     # SystemD
  elif [ "$SERVICE_NAME_INITD" != "" ]; then
    echo -e "Will use ${CYAN}init.d${NC} service manager"
    SERVICE_NAME=$SERVICE_NAME_INITD
    SERVICE_MANAGER=service       # SysV init.d
  else
    echo -e "${RED} No supported service manager detected.${NC}"
    echo -e "Please make sure that the database service is already registered and enabled."
    exit 3
  fi

  IS_MARIADB=$(mysql --version | grep MariaDB)
  VERSION_NUMBER=$(mysql --version | perl -pe '($_)=/([0-9]+([.][0-9]+)+([.][0-9]+)+)/')
  NEW_ROOT_PWD=$1

  if [ "$IS_MARIADB" != "" ]; then
    DB=MariaDB
  else
    DB=MySQL
  fi

  echo -e "Your ${CYAN}${DB}${NC} version is ${YELLOW}${VERSION_NUMBER}${NC}"
  reset_password "${SERVICE_MANAGER}:${SERVICE_NAME}" "${DB}:${VERSION_NUMBER}" $NEW_ROOT_PWD

  echo -e "${LGREEN}Reset password completed.${NC}"
  exit 0
fi
