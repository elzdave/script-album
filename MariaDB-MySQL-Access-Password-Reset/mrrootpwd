#!/bin/bash

# mrrootpwd : MariaDB/MySQL Root Password Reset
#
# This script require administrative privilege
#
# Usage     : sudo bash mrrootpwd [new_root_pwd]
# Example   : sudo bash mrrootpwd sTr0n9p45sw0Rd
#
# (c) 2023. David Eleazar

# Global variables
MY_CNF_DIR=/etc/my.cnf.d
MARIADB_CNF_FILE=${MY_CNF_DIR}/mariadb-server.cnf
MAIN_CONFIG=/etc/my.cnf

# ANSI colors
NC='\033[0m'
BLACK='\033[0;30m'
RED='\033[0;31m'
GREEN='\033[0;32m'
BROWN='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
LGRAY='\033[0;37m'
DGRAY='\033[1;30m'
LRED='\033[1;31m'
LGREEN='\033[1;32m'
YELLOW='\033[1;33m'
LBLUE='\033[1;34m'
LPURPLE='\033[1;35m'
LCYAN='\033[1;36m'
WHITE='\033[1;37m'

function version {
  echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }';
}

function load_unsecure_config {
  if [ -d "$MY_CNF_DIR" ] 
  then
    echo "Directory $MY_CNF_DIR exists."
    if [ -f "$MARIADB_CNF_FILE" ]
    then
      echo "Backuping $MARIADB_CNF_FILE as $MARIADB_CNF_FILE.bak . . ."
      cp -p $MARIADB_CNF_FILE $MARIADB_CNF_FILE.bak
      sed -i '/\[mysqld\]/a skip-grant-tables\nskip-networking' $MARIADB_CNF_FILE
    fi 
  else
    echo "Directory $MY_CNF_DIR does not exists. Will edit main $MAIN_CONFIG config."
    echo "Backuping $MAIN_CONFIG as $MAIN_CONFIG.bak . . ."
    cp -p $MAIN_CONFIG $MAIN_CONFIG.bak
    sed -i '/\[mysqld\]/a skip-grant-tables\nskip-networking' $MAIN_CONFIG
  fi
}

function check_restore_secure_config {
  if [ -d "$MY_CNF_DIR" ] 
  then
    echo "Directory $MY_CNF_DIR exists."
    if [ -f "$MARIADB_CNF_FILE.bak" ]
    then
      echo "Restoring original $MARIADB_CNF_FILE . . ."
      cp -p $MARIADB_CNF_FILE.bak $MARIADB_CNF_FILE
      rm $MARIADB_CNF_FILE.bak
    else
      echo "No backup found."
    fi
  else
    echo "Directory $MY_CNF_DIR does not exists."
    if [ -f "$MAIN_CONFIG.bak" ]
    then
      echo "Restoring original $MAIN_CONFIG . . ."
      cp -p $MAIN_CONFIG.bak $MAIN_CONFIG
      rm $MAIN_CONFIG.bak
    else
      echo "No backup found."
    fi
  fi
}

function begin_unsecure_service {
  systemctl stop $1
  check_restore_secure_config
  load_unsecure_config
  systemctl start $1
}

function end_unsecure_service {
  systemctl stop $1
  check_restore_secure_config
  systemctl start $1
}

function get_pwd_reset_query {
  local DB=$1
  local VERSION=$2
  local PASSWORD=$3

  if [ "$DB" == "MariaDB" ]
  then
    # Dealing with MariaDB database
    echo 'SET PASSWORD FOR `root`@`localhost` = PASSWORD("'$PASSWORD'");'
  else
    # Dealing with MySQL database
    if [ $(version "$VERSION") -lt $(version "5.7") ]; then
      # This query works on old MySQL (< 5.7)
      echo 'SET PASSWORD FOR `root`@`localhost` = PASSWORD("'$PASSWORD'");'
    else
      # This query works on newer MySQL (5.7 +)
      echo 'ALTER USER `root`@`localhost` IDENTIFIED BY "'$PASSWORD'";'
    fi
  fi
}

function reset_password {
  local SERVICE_NAME=$1
  local DB=$(echo $2 | awk -F':' '{print $1}')
  local VERSION=$(echo $2 | awk -F':' '{print $2}')
  local PASSWORD=$3

  begin_unsecure_service $SERVICE_NAME

  ALTER_QUERY=$(get_pwd_reset_query $DB $VERSION $PASSWORD)
  FLUSH_QUERY='FLUSH PRIVILEGES;'
  SQL="${FLUSH_QUERY} ${ALTER_QUERY} ${FLUSH_QUERY}"

  # For debugging only
  # echo $SQL

  echo -e "Resetting ${CYAN}${DB}${NC} root password . . ."
  RESULT=$(mysql -e "$SQL" 2>&1 | grep ERROR)

  if [ "$RESULT" == "" ]
  then
    echo -e "Done reset password! Your new root password is : ${GREEN}${PASSWORD}${NC}"
  else
    echo -e "${LRED}Failed to change root password. Please try again.${NC}"
  fi

  end_unsecure_service $SERVICE_NAME
}

# Main function execution
if [ "$1" == "" ]; then
  echo "Usage: sudo bash mrrootpwd [new_root_pwd]"
  echo "_____"
  echo "ERROR: You must supply a strong, unique password as an argument."
else
  SERVICE_NAME=$(systemctl list-units --type=service --all | grep -E 'MySQL|MariaDB' | awk -F' ' '{print $1}' | awk -F'.' '{print $1}')
  IS_MARIADB=$(mysql --version | grep MariaDB)
  VERSION_NUMBER=$(mysql --version | perl -pe '($_)=/([0-9]+([.][0-9]+)+([.][0-9]+)+)/')
  NEW_ROOT_PWD=$1

  if [ "$IS_MARIADB" != "" ]; then
    DB=MariaDB
  else
    DB=MySQL
  fi

  echo -e "Your ${CYAN}${DB}${NC} version is ${YELLOW}${VERSION_NUMBER}${NC}"
  reset_password $SERVICE_NAME "${DB}:${VERSION_NUMBER}" $NEW_ROOT_PWD
fi
